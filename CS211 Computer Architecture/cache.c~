#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <math.h>

struct cache{
int isValid;
char* tag;
char* blocks;
}

int main(int argc, char** argv){
if(argc != 7){
	if(strcmp(argv[0], "-h")){
	
	return 0;
	}
	else
	{
	printf("Error, incorrect number of arguments");
	return 1;
	}

}

FILE* trace;
trace = fopen(argv[6], 'r');
if(trace == NULL){
printf("file is NULL");
return 0;


}
int cachesize = atoi(argv[1]);
int blocksize = atoi(argv[3]);
int blocks = (chachesize/blocksize);


}

int hextobin(char* hexnum){
char* binnum;
int hexsize = strlen(hexnum);
binnum = malloc(hexsize * sizeof(char)* 4);
int i;
for (i = 0; i < hexsize; i++){

if(hexnum[i] == '0'){
binnum[i*4] = '0';
binnum[i*4 + 1] = '0';
binnum[i*4 + 2] = '0';
binnum[i*4 + 3] = '0';

}
if(hexnum[i] == '1'){
binnum[i*4] = '0';
binnum[i*4 + 1] = '0';
binnum[i*4 + 2] = '0';
binnum[i*4 + 3] = '1';

}
if(hexnum[i] == '2'){
binnum[i*4] = '0';
binnum[i*4 + 1] = '0';
binnum[i*4 + 2] = '1';
binnum[i*4 + 3] = '0';


}
if(hexnum[i] == '3'){
binnum[i*4] = '0';
binnum[i*4 + 1] = '0';
binnum[i*4 + 2] = '1';
binnum[i*4 + 3] = '1';


}
if(hexnum[i] == '4'){
binnum[i*4] = '0';
binnum[i*4 + 1] = '1';
binnum[i*4 + 2] = '0';
binnum[i*4 + 3] = '0';

}
if(hexnum[i] == '5'){
binnum[i*4] = '0';
binnum[i*4 + 1] = '1';
binnum[i*4 + 2] = '0';
binnum[i*4 + 3] = '1';

}
if(hexnum[i] == '6'){
binnum[i*4] = '0';
binnum[i*4 + 1] = '1';
binnum[i*4 + 2] = '1';
binnum[i*4 + 3] = '0';

}
if(hexnum[i] == '7'){
binnum[i*4] = '0';
binnum[i*4 + 1] = '1';
binnum[i*4 + 2] = '1';
binnum[i*4 + 3] = '1';


}
if(hexnum[i] == '8'){
binnum[i*4] = '1';
binnum[i*4 + 1] = '0';
binnum[i*4 + 2] = '0';
binnum[i*4 + 3] = '0';

}
if(hexnum[i] == '9'){
binnum[i*4] = '1';
binnum[i*4 + 1] = '0';
binnum[i*4 + 2] = '0';
binnum[i*4 + 3] = '1';

}
if(hexnum[i] == 'a' || hexnum[i] == 'A'){

binnum[i*4] = '1';
binnum[i*4 + 1] = '0';
binnum[i*4 + 2] = '1';
binnum[i*4 + 3] = '0';

}
if(hexnum[i] == 'b' || hexnum[i] == 'B'){
binnum[i*4] = '1';
binnum[i*4 + 1] = '0';
binnum[i*4 + 2] = '1';
binnum[i*4 + 3] = '1';

}
if(hexnum[i] == 'c' || hexnum[i] == 'C'){
binnum[i*4] = '1';
binnum[i*4 + 1] = '1';
binnum[i*4 + 2] = '0';
binnum[i*4 + 3] = '0';


}
if(hexnum[i] == 'd' || hexnum[i] == 'D'){
binnum[i*4] = '1';
binnum[i*4 + 1] = '1';
binnum[i*4 + 2] = '0';
binnum[i*4 + 3] = '1';

}
if(hexnum[i] == 'e' || hexnum[i] == 'E'){
binnum[i*4] = '1';
binnum[i*4 + 1] = '1';
binnum[i*4 + 2] = '1';
binnum[i*4 + 3] = '0';

}
if(hexnum[i] == 'f' || hexnum[i] == 'F'){
binnum[i*4] = '1';
binnum[i*4 + 1] = '1';
binnum[i*4 + 2] = '1';
binnum[i*4 + 3] = '1';


}


}
